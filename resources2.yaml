AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation stack.

Resources:
  JahnaviLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JahnaviLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3textractPolly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:GET 
                  - polly:*
                  - textract:*
                Resource: "*"
 
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextractPolly
      Handler: index.lambda_handler
      Role: !GetAtt JahnaviLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
 
          def lambda_handler(event, context):
              body = json.loads(event['body'])
              s3_client = boto3.client('s3')
              textract_client = boto3.client('textract')
              polly_client = boto3.client('polly')
              input_bucket_name = body['input_bucket']
              document_key = body['input_bucket_file']
              output_bucket_name = 'output-polly-jahnavi'
              response = textract_client.start_document_text_detection(
                DocumentLocation={'S3Object': {'Bucket': input_bucket_name, 'Name': document_key}}
                )
              job_status = 'IN_PROGRESS'
              while job_status == 'IN_PROGRESS':
                  result = textract_client.get_document_text_detection(JobId=response['JobId'])
                  job_status = result['JobStatus']

              extracted_text = " ".join([block['Text'] for block in result['Blocks'] if block['BlockType'] == 'LINE'])
              polly_response = polly_client.start_speech_synthesis_task(
              OutputS3BucketName=output_bucket_name,
              OutputFormat='mp3',
              Text=extracted_text,
              VoiceId='Joanna'
              )
              return {
                'statusCode': 200,
                'body': f"Text extracted and speech synthesis started with TaskId {polly_response['SynthesisTask']['TaskId']}"
                }
              
      Runtime: python3.8
      Timeout: 500
 
  JahnaviApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: JahnaviAPIGateway
 
  JahnaviApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt JahnaviApiGatewayRestApi.RootResourceId
      PathPart: textract-polly
      RestApiId: !Ref JahnaviApiGatewayRestApi
  JahnaviApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt JahnaviGatewayCloudWatchRole.Arn
 
  JahnaviGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  JahnaviApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref JahnaviApiGatewayResource
      RestApiId: !Ref JahnaviApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
 
  JahnaviApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - JahnaviApiGatewayMethod
    Properties:
      RestApiId: !Ref JahnaviApiGatewayRestApi
      StageName: prod
 
  JahnaviLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JahnaviApiGatewayRestApi}/*/*"
