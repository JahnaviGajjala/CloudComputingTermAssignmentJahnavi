AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation stack for an API Gateway, Lambda function, S3, Textract, and Polly with
  security and maintainability optimizations.

Resources:
  JahnaviLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JahnaviLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: JahnaviLambdaS3TextractPollyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - polly:*
                  - textract:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:GET
                Resource: 
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}::/restapis/*"
        

  JahnaviLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextractPollyFunction
      Handler: index.lambda_handler
      Role: !GetAtt JahnaviLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def lambda_handler(event, context):
              body = json.loads(event['body'])
              s3_client = boto3.client('s3')
              textract_client = boto3.client('textract')
              polly_client = boto3.client('polly')
              input_bucket_name = body['input_bucket']
              document_key = body['input_bucket_file']
              output_bucket_name = os.environ['OUTPUT_BUCKET_NAME']
              
              # Start Textract job
              response = textract_client.start_document_text_detection(DocumentLocation={'S3Object': {'Bucket': input_bucket_name, 'Name': document_key}})
              job_id = response['JobId']
              job_status = 'IN_PROGRESS'
              while job_status == 'IN_PROGRESS':
                  result = textract_client.get_document_text_detection(JobId=job_id)
                  job_status = result['JobStatus']
              
              # Compile extracted text
              extracted_text = " ".join([item['Text'] for item in result['Blocks'] if item['BlockType'] == 'LINE'])
              
              # Start Polly job
              polly_response = polly_client.start_speech_synthesis_task(OutputS3BucketName=output_bucket_name, OutputFormat='mp3', Text=extracted_text, VoiceId='Joanna')
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(f"Text extracted and speech synthesis started with TaskId {polly_response['SynthesisTask']['TaskId']}")
              }
      Runtime: python3.8
      Environment:
        Variables:
          OUTPUT_BUCKET_NAME: "output-polly-jahnavi"
      Timeout: 500

  JahnaviApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: JahnaviApiGateway

  JahnaviApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt JahnaviApiGatewayRestApi.RootResourceId
      PathPart: textract-polly
      RestApiId: !Ref JahnaviApiGatewayRestApi

  JahnaviApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref JahnaviApiGatewayResource
      RestApiId: !Ref JahnaviApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JahnaviLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  JahnaviApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: JahnaviApiGatewayMethod
    Properties:
      RestApiId: !Ref JahnaviApiGatewayRestApi
      StageName: prod

  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JahnaviLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JahnaviApiGatewayRestApi}/*/*"

  JahnaviGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JahnaviLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JahnaviLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"
